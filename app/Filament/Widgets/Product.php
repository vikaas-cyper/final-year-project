<?php

namespace App\Filament\Widgets;

use App\Filament\Resources\ProductSaleResource;
use App\Models\AreaManager;
use App\Models\DoctorMaster;
use App\Models\ProductSale;
use Filament\Tables;
use Filament\Tables\Columns\TextColumn;
use Filament\Widgets\TableWidget as BaseWidget;
use Heloufir\FilamentWorkflowManager\Models\WorkflowModelStatus;
use Heloufir\FilamentWorkflowManager\Models\WorkflowPermission;
use Heloufir\FilamentWorkflowManager\Models\WorkflowStatus;
use Heloufir\FilamentWorkflowManager\Models\WorkflowUserPermission;
use Heloufir\FilamentWorkflowManager\Tables\Columns\WorkflowStatusColumn;
use Illuminate\Database\Eloquent\Builder;

class Product extends BaseWidget
{
    protected int | string | array $columnSpan = 'full';

    protected static ?int $sort = 2;

    protected function getTableQuery(): Builder
    {
        $permission_id = WorkflowPermission::where('role', '=', ProductSale::PERMISSION)->first()->id;

        $user = auth()->user();

        $canEdit = WorkflowUserPermission::where('user_id', '=', $user->id)->where('workflow_permission_id', '=', $permission_id)->first();

        $model = "App\Models\ProductSale";

        $initiated = WorkflowStatus::where('name', '=', ProductSale::INITIATED)->first()->id;

        $rejected = WorkflowStatus::where('name', '=', ProductSale::REJECTED)->first()->id;

        if ($canEdit != null) {
            $product_id = WorkflowModelStatus::where('modelable_type', '=', $model)->where('workflow_status_id', '=', $initiated)->pluck('modelable_id');

            $marketing_representative_id = AreaManager::where('email', '=', $user->email)->first()->marketing_representatives->pluck('id');

            $doctor_master_id            = DoctorMaster::whereIn('marketing_representative_id',$marketing_representative_id )->pluck('id');

            return ProductSale::whereIn('id', $product_id)->whereIn('doctor_master_id', $doctor_master_id)->orderBy('created_at','desc');
        } else {
            $product_id = WorkflowModelStatus::where('modelable_type', '=', $model)->where('workflow_status_id', '=', $rejected)->pluck('modelable_id');

            return ProductSale::whereIn('id', $product_id)->where('created_by', '=', $user->email);
        }
    }

    protected function getTableColumns(): array
    {
        return [

            TextColumn::make('stockist.name')
                ->label('Stockist')
                ->toggleable()
                ->searchable(),

            TextColumn::make('doctor_master.billing.billing_name')
                ->label('Billing')
                ->searchable()
                ->toggleable()
            ,

            TextColumn::make('doctor_master.billing.doctor_name')
                ->label('Chemist')
                ->searchable()
                ->toggleable(isToggledHiddenByDefault: true),

            TextColumn::make('product.name')
                ->label('Product')
                ->searchable(),

            TextColumn::make('sales_total')
                ->label('Sales Total')
                ->searchable(),

            TextColumn::make('free_total')
                ->label('Free total')
                ->searchable(),

            WorkflowStatusColumn::make()->label('Verification'),


            TextColumn::make('created_by')
                ->label('Created By')
                ->toggleable(isToggledHiddenByDefault: true)
                ->searchable(),


        ];
    }

    protected function getTableActions(): array
    {
        return [
            Tables\Actions\Action::make('Edit')
                ->url(fn (ProductSale $record): string => ProductSaleResource::getUrl('edit', ['record' => $record])),
        ];
    }

    public static function canView(): bool
    {
        $admin = ! auth()->user()->hasRole('Super Admin');

        return $admin; // TODO: Change the autogenerated stub
    }
}
