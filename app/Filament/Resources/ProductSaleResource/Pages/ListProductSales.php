<?php

namespace App\Filament\Resources\ProductSaleResource\Pages;

use App\Filament\Resources\ProductSaleResource;
use App\Models\AreaManager;
use App\Models\DoctorMaster;
use App\Models\MarketingRepresentative;
use Filament\Pages\Actions;
use Filament\Resources\Pages\ListRecords;
use Heloufir\FilamentWorkflowManager\Models\WorkflowPermission;
use Heloufir\FilamentWorkflowManager\Models\WorkflowUserPermission;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Facades\DB;
use PhpParser\Comment\Doc;

class ListProductSales extends ListRecords
{
    protected static string $resource = ProductSaleResource::class;

    public function ImportAction(){
        if (auth()->user()->hasRole('Super Admin')){
            return [Actions\Action::make('import')
                ->label('Import')
                ->url(static::$resource::getUrl('import'))
                ->color('primary')
                ->outlined()];
        }

        return [];
    }
    protected function getActions(): array
    {
        return array_merge([
            Actions\CreateAction::make()
        ], $this->ImportAction());
    }

    protected function getTableQuery(): Builder
    {
        $query =parent::getTableQuery()
            ->leftJoin('workflow_model_statuses', 'product_sales.id', '=', 'workflow_model_statuses.modelable_id')
            ->leftJoin('workflow_statuses', 'workflow_model_statuses.workflow_status_id', '=', 'workflow_statuses.id')
            ->where('modelable_type', '=' ,'App\Models\ProductSale')
            ->select('product_sales.*', 'workflow_statuses.name');

        if (auth()->user()->hasRole('Super Admin')) {
            return $query; // TODO: Change the autogenerated stub
        }

        $permission_id = WorkflowPermission::where('role', '=', 'ProductSalesPermission')->first()->id;
        $user = auth()->user();
        $canEdit = WorkflowUserPermission::where('user_id', '=', $user->id)->where('workflow_permission_id', '=', $permission_id)->first();
        $canEdit = $canEdit ? 1 : 0;

        if ($canEdit) {
            $marketing_representative_id = AreaManager::where('email', '=', $user->email)->first()->marketing_representatives->pluck('id');
            $doctor_master_id            = DoctorMaster::whereIn('marketing_representative_id' , $marketing_representative_id)->pluck('id');

        }

        else
        {
            $marketing_representative =  MarketingRepresentative::where('email', '=', $user->email)->first();
            $doctor_master_id = [];
            if ($marketing_representative){
                $marketing_representative_id = $marketing_representative->id;
                $doctor_master_id            = DoctorMaster::whereIn('marketing_representative_id' , [$marketing_representative_id])->pluck('id');
            }

        }


        return $query->whereIn('doctor_master_id', $doctor_master_id);
    }
}
